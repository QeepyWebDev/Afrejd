@page "/Admin-ärenden"

@using Afrejd.Web.Components.Layout
@using Afrejd.Web.Data.Models
@using Afrejd.Web.Data.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject HttpClient httpClient
@inject IOrderService OrderService
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@layout AdminMenu
@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Ärenden</PageTitle>

<MudContainer Class="my-5">
    <div>
        @if (!string.IsNullOrEmpty(ConfirmOrderMessage))
        {
            <div class="alert alert-success" role="alert">
                @ConfirmOrderMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(DeclineOrderMessage))
        {
            <div class="alert alert-success" role="alert">
                @DeclineOrderMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(UpdatePriceMessage))
        {
            <div class="alert alert-success" role="alert">
                @UpdatePriceMessage
            </div>
        }
    </div>

    <input class="form-control mr-sm-2" aria-label="Search" type="text" id="orderSearch" onkeyup="searchOrders()" placeholder="Sök Ärendenummer...">

    <div class="table-responsive">
        <table class="table table-striped table-bordered" id="orderTable">
            <thead class="thead-dark">
                <tr>
                    <th>Ärendenummer</th>
                    <th>Datum</th>
                    <th>Tjänster</th>
                    <th>Prisförslag</th>
                    <th>Status</th>
                    <th>Ändra Status</th>
                    <th>Åtgärd</th>
                </tr>
            </thead>
            <tbody>
                @if (orders != null)
                {
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.Ordernumber</td>
                            <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                @foreach (var detail in order.OrderDetails)
                                {
                                    <span>@detail.Product.Name</span>
                                    <br />
                                }
                            </td>
                            <td><input type="number" @bind="@order.PriceEstimate" class="form-control form-control-sm" /></td>
                            <td>@order.Status</td>
                            <td>
                                <select @bind="@order.Status" class="form-control form-control-sm">
                                    @foreach (var status in Enum.GetValues(typeof(OrderStatus)))
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => ShowConfirmationDialog(order)">Radera</button>
                                <button type="button" class="btn btn-dark btn-sm" @onclick="() => ChangeOrderPriceEstimate(order)">Uppdatera Prisförslag</button>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeclineOrder(order)">Avslå Ärende</button>
                                <button type="button" class="btn btn-success btn-sm" @onclick="() => ConfirmOrder(order)">Bekräfta Ärende</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <p>Inga ärenden hittades.</p>
                }
            </tbody>
        </table>
    </div>
</MudContainer>


<script>
    function searchOrders() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("orderSearch");
        filter = input.value.trim();

        table = document.getElementById("orderTable");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            if (td) {
                txtValue = td.textContent || td.innerText;

                if (!isNaN(filter) && txtValue.startsWith(filter)) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

@code {
    private List<Order> orders;
    private string ConfirmOrderMessage;
    private string DeclineOrderMessage;
    private string UpdatePriceMessage;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrders();
    }

    public enum OrderStatus
    {
        Granskas,
        Hanteras,
        Genomfört
    }

    private async Task ChangeOrderStatus(Order order, string newStatus)
    {
        if (Enum.TryParse<Afrejd.Web.Data.Models.Order.OrderStatus>(newStatus, out var status))
        {
            await OrderService.ChangeOrderStatus(order.Id, status);
        }
        else
        {
            Console.WriteLine($"Invalid order status: {newStatus}");
        }
    }

    private async Task ShowConfirmationDialog(Order order)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill radera ordern med ordernummer {order.Id}?");
        if (confirmed)
        {
            await DeleteOrder(order);
        }
    }

    private async Task DeleteOrder(Order order)
    {
        await OrderService.DeleteOrder(order.Id);
        orders.Remove(order);
    }

    private async Task ConfirmOrder(Order order)
    {
        await OrderService.ConfirmOrder(order.Id);
        orders.Remove(order);
        ConfirmOrderMessage = "Ärende med nummer " + order.Ordernumber + " har bekräftats!";
    }

    private async Task DeclineOrder(Order order)
    {
        await OrderService.DeclineOrder(order.Id);
        orders.Remove(order);
        DeclineOrderMessage = "Ärende med nummer " + order.Ordernumber + " har avslagits!";
    }

    private async Task ChangeOrderPriceEstimate(Order order)
    {
        await OrderService.UpdatePriceEstimate(order.Id, order.PriceEstimate);
        UpdatePriceMessage = "Prisförslag för ärende med nummer " + order.Ordernumber + " har uppdaterats till " + order.PriceEstimate + " kronor.";
    }
}
