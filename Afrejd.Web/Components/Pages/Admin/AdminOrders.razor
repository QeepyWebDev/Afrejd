@page "/ViewOrders"

@using Afrejd.Web.Data.Models
@using Afrejd.Web.Data.Interfaces
@inject IOrderService OrderService
@inject IJSRuntime JsRuntime

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th>Order ID</th>
            <th>Ordernummer</th>
            <th>Prisförslag</th>
            <th>Status</th>
            <th> </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Ordernumber</td>
                <td>@order.PriceEstimate</td>
                <td>@order.Status</td>
                <td>
                    <select @bind="@order.Status">
                        @foreach (var status in Enum.GetValues(typeof(OrderStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => ShowConfirmationDialog(order)">Radera</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Order> orders;

    protected override void OnInitialized()
    {
        orders = OrderService.GetAllOrders();
    }

    public enum OrderStatus
    {
        Hanteras,
        Packas,
        Skickad
    }

    private async Task ChangeOrderStatus(Order order, string newStatus)
    {
        if (Enum.TryParse<Afrejd.Web.Data.Models.Order.OrderStatus>(newStatus, out var status))
        {
            await OrderService.ChangeOrderStatus(order.Id, status);
        }
        else
        {
            Console.WriteLine($"Invalid order status: {newStatus}");
        }
    }

    private async Task ShowConfirmationDialog(Order order)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill radera ordern med ordernummer {order.Id}?");
        if (confirmed)
        {
            await DeleteOrder(order);
        }
    }

    private async Task DeleteOrder(Order order)
    {
        await OrderService.DeleteOrder(order.Id);
        orders.Remove(order);
    }
}
